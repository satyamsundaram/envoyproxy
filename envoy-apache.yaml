static_resources:
  listeners:
  - name: listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: apache_backend
                  request_mirror_policies:
                    - cluster: nginx_backend
          
          http_filters:
          - name: decompressor
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.decompressor.v3.Decompressor
              decompressor_library:
                name: basic
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.compression.gzip.decompressor.v3.Gzip
                  window_bits: 10
                  
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                function envoy_on_request(request_handle)
                  package.path = package.path .. ';/etc/envoy/json.lua'
                  local json = require "json"
                  local body = request_handle:body()
                  local jsonString = tostring(body:getBytes(0, body:length()))
                  if(request_handle:headers():get(":method")=="POST") then
                    request_handle:logInfo(jsonString)
                    local lua_kv = json.decode(jsonString)
                    for key, val in pairs(lua_kv) do
                      print(key, val)
                      request_handle:headers():add(key, val)
                    end
                  end
                end

          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
          access_log:
          - name: envoy.access_loggers.json_file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /dev/stdout
              json_format:
                start_time: "%START_TIME%"
                method: "%REQ(:method)%"
                path: "%REQ(X-ENVOY-ORIGINAL-PATH?:path)%"
                name: "%REQ(name)%"
                http.request.method: "%REQ(:METHOD)%"
                http.response.body.bytes: "%BYTES_SENT%"
                status_code: "%RESPONSE_CODE%"
                response_flags: "%RESPONSE_FLAGS%"
                response_duration: "%DURATION%"
                bytes_received: "%BYTES_RECEIVED%"
                bytes_sent: "%BYTES_SENT%"
                upstream_service_time: "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%"

  clusters:
  - name: apache_backend
    type: strict_dns
    connect_timeout: 1s
    lb_policy: round_robin
    load_assignment:
      cluster_name: apache_backend
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: apache
                port_value: 80

  - name: nginx_backend
    type: strict_dns
    connect_timeout: 1s
    load_assignment:
      cluster_name: nginx_backend
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: nginx
                port_value: 80
